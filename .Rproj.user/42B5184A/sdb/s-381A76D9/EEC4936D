{
    "collab_server" : "",
    "contents" : "#' @title Load OHSDI study\n#'\n#' @details\n#' This function loads an OHDSI study results from disk file.\n#'\n#' @param file\t(Optional) Name of local file to place results; makre sure to use forward slashes (/)\n#' @param verbose Logical: print R object names that are loaded\n#'\n#' @return\n#' A list of class type \\code{OhsiStudy} that contains all saved study objects\n#'\n#' @export\nloadOhdsiStudy <- function(file,\n\t\t\t\t\t\t\t\t\t\t\t\t\t verbose = FALSE) {\n\n\tif (missing(file)) file <- getDefaultStudyFileName()\n\n\t# Return list of results\n\ttmp <- new.env()\n\tload(file, envir = tmp, verbose = verbose)\n\tresult <- mget(ls(tmp), envir = tmp)\n\tclass(result) <- \"OhdsiStudy\"\n\treturn (result)\n}\n\n#' @title Save OHDSI study\n#'\n#' @details\n#' This function saves an OHDSI study to disk file.  All objects are written using \\code{\\link{save}}\n#' format and can be read back from file at a later time by using the function \\code{\\link{loadOhdsiStudy}}.\n#'\n#' @param list\tA list of R objects to save to disk file.\n#' @param file\t(Optional) Name of local file to place results; makre sure to use forward slashes (/)\n#' @param compress Logical or character string specifying the use of compression. See \\code{\\link{save}}\n#' @param includeMetadata Logical: include metadata about user and system in saved file\n#'\n#' @export\nsaveOhdsiStudy <- function(list,\n\t\t\t\t\t\t\t\t\t\t\t\t\t file,\n\t\t\t\t\t\t\t\t\t\t\t\t\t compress = \"xz\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t includeMetadata = TRUE) {\n\n\tif (missing(list)) {\n\t\tstop(\"Must provide object list to save\")\n\t}\n\n\tif (missing(file)) file <- getDefaultStudyFileName()\n\n\tif (includeMetadata) {\n\t\tmetadata <- list()\n\n\t\tmetadata$r.version <- R.Version()$version.string\n\t\tinfo <- Sys.info()\n\t\tmetadata$sysname <- info[[\"sysname\"]]\n\t\tmetadata$user <- info[[\"user\"]]\n\t\tmetadata$nodename <- info[[\"nodename\"]]\n\t\tmetadata$time <- Sys.time()\n\t\tassign(\"metadata\", metadata, envir = parent.frame()) # place in same environment as named objects\n\t\tlist <- c(list, \"metadata\")\n\t}\n\n\tsave(list = list,\n\t\t\t file = file,\n\t\t\t envir = parent.frame(1),\n\t\t\t compress = compress)\n}\n\n#' @keywords internal\ninvokeSql <- function(fileName, dbms, conn, text, use.ffdf = FALSE, quiet = TRUE)  {\n\n\tparameterizedSql <- SqlRender::readSql(system.file(paste(\"sql/\",\"sql_server\",sep=\"\"),\n\t                                                   fileName,\n\t                                                   package=\"DrugAnalysis\"))\n\n\trenderedSql <- SqlRender::renderSql(parameterizedSql)$sql\n\ttranslatedSql <- SqlRender::translateSql(renderedSql,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t sourceDialect = \"sql server\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t targetDialect = dbms)$sql\n\twriteLines(text)\n\tif (use.ffdf) {\n\t\treturn (DatabaseConnector::dbGetQuery.ffdf(conn, translatedSql,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t quiet = quiet))\n\t} else {\n\t\treturn (DBI::dbGetQuery(conn, translatedSql))\n\t}\n}\n\n#' Copy of function SqlRender::loadRenderTranslateSql\n#' @keywords internal\nloadRenderTranslateSql <- function(sqlFilename, packageName, dbms = \"sql server\", ...,\n                                   oracleTempSchema = NULL) {\n\n    pathToSql <- system.file(paste(\"sql/\", gsub(\" \", \"_\", dbms),\n                                   sep = \"\"), sqlFilename, package = packageName)\n    mustTranslate <- !file.exists(pathToSql)\n    if (mustTranslate) {\n        pathToSql <- system.file(paste(\"sql/\", \"sql_server\",\n                                       sep = \"\"), sqlFilename, package = packageName)\n    }\n    parameterizedSql <- readChar(pathToSql, file.info(pathToSql)$size)\n    renderedSql <- renderSql(parameterizedSql[1], ...)$sql\n    if (mustTranslate)\n        renderedSql <- translateSql(renderedSql, \"sql server\",\n                                    dbms, oracleTempSchema)$sql\n    renderedSql\n}\n\n\n#' @title Email results\n#'\n#' @details\n#' This function emails the result CSV files to the study coordinator.\n#'\n#' @return\n#' A list of files that were emailed.\n#'\n#' @param from     Return email address\n#' @param to\t\t\t(Optional) Delivery email address (must be a gmail.com acccount)\n#' @param subject  (Optional) Subject line of email\n#' @param dataDescription A short description of the database\n#' @param file\t(Optional) Name of local file with results; makee sure to use forward slashes (/)\n#'\n#' @export\nemail <- function(from,\n\t\t\t\t\t\t\t\t\tto,\n\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\tdataDescription,\n\t\t\t\t\t\t\t\t\tfile) {\n\n\tif (missing(from)) stop(\"Must provide return address\")\n\tif (missing(dataDescription)) stop(\"Must provide a data description\")\n\n\tif (missing(to)) to <- getDestinationAddress()\n\tif (missing(subject)) subject <- getDefaultStudyEmailSubject()\n\tif (missing(file)) file <- getDefaultStudyFileName()\n\n\tif(!file.exists(file)) stop(paste(c(\"No results file named '\",file,\"' exists\"),sep = \"\"))\n\n\ttryCatch({\n\t\tresult <- mailR::send.mail(from = from,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t to = to,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t subject = subject,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t body = paste(\"\\n\", dataDescription, \"\\n\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t sep = \"\"),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t smtp = list(host.name = \"aspmx.l.google.com\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\tport = 25),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t attach.files = file,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t authenticate = FALSE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t send = TRUE)\n\t\tif (result$isSendPartial()) {\n\t\t\tstop(\"Unknown error in sending email\")\n\t\t} else {\n\t\t\twriteLines(c(\n\t\t\t\t\"Sucessfully emailed the following file:\",\n\t\t\t\tpaste(\"\\t\", file, sep = \"\"),\n\t\t\t\tpaste(\"to:\", to)\n\t\t\t))\n\t\t}\n\t}, error = function(e) {\n\t\twriteLines(c(\n\t\t\t\"Error in automatically emailing results, most likely due to security settings.\",\n\t\t\t\"Please manually email the following file:\",\n\t\t\tpaste(\"\\t\", file, sep = \"\"),\n\t\t\tpaste(\"to:\", to)\n\t\t))\n\t})\n}\n",
    "created" : 1468233212671.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2423016874",
    "id" : "EEC4936D",
    "lastKnownWriteTime" : 1468236100,
    "last_content_update" : 1468236100344,
    "path" : "~/Documents/OHDSIDeriveVariables/R/StudyInvariant.R",
    "project_path" : "R/StudyInvariant.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}